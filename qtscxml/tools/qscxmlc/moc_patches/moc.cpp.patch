--- .upstream/moc.cpp	2024-11-22 10:57:14.673629148 +0100
+++ moc.cpp	2024-11-29 15:00:06.897734418 +0100
@@ -12,15 +12,15 @@
 #include <QtCore/qdir.h>
 #include <QtCore/qjsondocument.h>
 
-// for normalizeTypeInternal
-#include <private/qmetaobject_p.h>
-#include <private/qmetaobject_moc_p.h>
-#include <private/qduplicatetracker_p.h>
+// -- QtScxml
+#include <QtCore/qjsonobject.h>
+// -- QtScxml
 
 QT_BEGIN_NAMESPACE
 
 using namespace Qt::StringLiterals;
 
+#if 0 // -- QtScxml
 // only moc needs this function
 static QByteArray normalizeType(const QByteArray &ba)
 {
@@ -2006,6 +2006,7 @@
         }
     }
 }
+#endif // -- QtScxml
 
 QJsonObject ClassDef::toJson() const
 {
@@ -2199,8 +2200,8 @@
         def["alias"_L1] = QString::fromUtf8(enumName);
     if (!type.isEmpty())
         def["type"_L1] = QString::fromUtf8(type);
-    def["isFlag"_L1] = (flags & EnumIsFlag) != 0;
-    def["isClass"_L1] = (flags & EnumIsScoped) != 0;
+    def["isFlag"_L1] = (flags & QtMocConstants::EnumIsFlag) != 0;
+    def["isClass"_L1] = (flags & QtMocConstants::EnumIsScoped) != 0;
 
     QJsonArray valueArr;
     for (const QByteArray &value: values)
